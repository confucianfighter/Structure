// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data_types/object_box_types/category.dart';
import 'src/data_types/object_box_types/chat_history.dart';
import 'src/data_types/object_box_types/chat_message.dart';
import 'src/data_types/object_box_types/countdown.dart';
import 'src/data_types/object_box_types/flash_card.dart';
import 'src/data_types/object_box_types/flash_card_sequence.dart';
import 'src/data_types/object_box_types/sequence_item.dart';
import 'src/data_types/object_box_types/settings_history.dart';
import 'src/data_types/object_box_types/spoken_message.dart';
import 'src/data_types/object_box_types/spoken_message_category.dart';
import 'src/data_types/object_box_types/subject.dart';
import 'src/data_types/object_box_types/writing_prompt.dart';
import 'src/data_types/object_box_types/writing_prompt_answer.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 146195575595869195),
      name: 'Countdown',
      lastPropertyId: const obx_int.IdUid(2, 4543042334429189001),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5203136631529040311),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4543042334429189001),
            name: 'remainingSeconds',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4562760401703630193),
      name: 'WritingPrompt',
      lastPropertyId: const obx_int.IdUid(9, 5420318153679335413),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7069261292951093926),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7821508857526449903),
            name: 'prompt',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 2350582702432164612)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4192646412743095980),
            name: 'lastTimeAnswered',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3903436709462758320),
            name: 'lastEdited',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5420318153679335413),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 8106221824084237315),
            relationTarget: 'Category')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'answers',
            srcEntity: 'WritingPromptAnswer',
            srcField: 'writingPrompt')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8016132364118866485),
      name: 'WritingPromptAnswer',
      lastPropertyId: const obx_int.IdUid(4, 3456486402785270961),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3949528071363160509),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6631672326208742983),
            name: 'answer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1855726055833227939),
            name: 'dateAnswered',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3456486402785270961),
            name: 'writingPromptId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 868981703487449150),
            relationTarget: 'WritingPrompt')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8031683048514304163),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(2, 5294113057338185632),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5502069285358560879),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5294113057338185632),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 8807564465112648040))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 5068284084408045983),
      name: 'Sequence',
      lastPropertyId: const obx_int.IdUid(3, 9148759602975562326),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1453121725179244857),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4205037057387307521),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9148759602975562326),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'slots', srcEntity: 'SequenceItem', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 2020180581908519582),
      name: 'FlashCard',
      lastPropertyId: const obx_int.IdUid(19, 3770844550917202134),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4749978696193239874),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3784553455054995023),
            name: 'question',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4483919900487948709),
            name: 'answer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3274326393137651722),
            name: 'timesCorrect',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3917552731831000198),
            name: 'timesIncorrect',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1924135883995477663),
            name: 'userRating',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3832174913847307587),
            name: 'subjectId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(10, 6888978690879247321),
            relationTarget: 'Subject'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1311130929163470500),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 6452266990829851838),
            name: 'correctAnswerDislpayLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 5722129757016257210),
            name: 'questionDisplayLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 7577352344915177236),
            name: 'answerInputLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 452080182493718223),
            name: 'hint',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 537573080717479844),
            name: 'chatHistoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(17, 1775482827660519570),
            relationTarget: 'ChatHistory'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 7623924826722180665),
            name: 'grades',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 3770844550917202134),
            name: 'analysis',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 3684946452892985486),
      name: 'SequenceItem',
      lastPropertyId: const obx_int.IdUid(7, 646008176532535316),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5632928414777226730),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7014212585881900785),
            name: 'index',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6169072553113434335),
            name: 'entityId',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7821170781216320390),
            name: 'sequenceId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(8, 1652350237717642594),
            relationTarget: 'Sequence'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 646008176532535316),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 3518682031366318632),
      name: 'Subject',
      lastPropertyId: const obx_int.IdUid(4, 6046915051004450969),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6149063534090813934),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1290040545491520401),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(9, 2249157558307694662)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2141324371269352130),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6046915051004450969),
            name: 'color',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 4887035928040764209),
      name: 'FlashCardSequence',
      lastPropertyId: const obx_int.IdUid(5, 2351647733983166443),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5233234839710568956),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1964265748702605284),
            name: 'number_of_cards',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2351647733983166443),
            name: 'subjectId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(11, 1402608994932849385),
            relationTarget: 'Subject')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 8013161053207222681),
      name: 'Settings',
      lastPropertyId: const obx_int.IdUid(24, 7663497536443771573),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 864882406465104960),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7255906348802409266),
            name: 'homeFolderPath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3774784758974627001),
            name: 'dateModifiedMillis',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(21, 909367758894680461),
            name: 'themeMode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(22, 2306390036233425434),
            name: 'openai_tts_gain',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(23, 6162968021176892675),
            name: 'cssStylePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(24, 7663497536443771573),
            name: 'codeStylePath',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 2084968273887987538),
      name: 'SpokenMessage',
      lastPropertyId: const obx_int.IdUid(9, 6059700306309498624),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1834274863727384631),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6056145954348888243),
            name: 'text',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(12, 8672730454093678419)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3997274036495739192),
            name: 'audioFilePath',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(13, 4885641807156364558)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1413956326681586186),
            name: 'lastEdited',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4594596014634950522),
            name: 'lastTimeUsed',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3879553902245350804),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(14, 7078071130441519314),
            relationTarget: 'SpokenMessageCategory'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5942028616569058601),
            name: 'speed',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4557480749669223627),
            name: 'voice',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6059700306309498624),
            name: 'gain',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 9195616989878741009),
      name: 'SpokenMessageCategory',
      lastPropertyId: const obx_int.IdUid(3, 4189744956463434323),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5496164166723507336),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 272802014450438586),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(15, 7701589329274657698)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4189744956463434323),
            name: 'message_prefix',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 8198919691873096377),
      name: 'ChatHistory',
      lastPropertyId: const obx_int.IdUid(1, 8640836888002326028),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8640836888002326028),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'messages', srcEntity: 'ChatMessage', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 8885578874415051876),
      name: 'ChatMessage',
      lastPropertyId: const obx_int.IdUid(5, 8983738279262490827),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4934606785013039928),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3125870950310741075),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3530588648540991239),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6533673515128848537),
            name: 'embedding',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8983738279262490827),
            name: 'chatHistoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(16, 5357683070213496569),
            relationTarget: 'ChatHistory')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(15, 8885578874415051876),
      lastIndexId: const obx_int.IdUid(17, 1775482827660519570),
      lastRelationId: const obx_int.IdUid(1, 2382961371279645997),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [4113595854453584037],
      retiredIndexUids: const [2601898366546795901, 1127005364175938284],
      retiredPropertyUids: const [
        4490942566436496262,
        1643685379610388084,
        1576598753525470887,
        6675773488354720603,
        5633534938073970032,
        6329965284889014362,
        7240077867940477600,
        8364044782680838125,
        4011602275894529467,
        5824347107063604006,
        1356691746063744145,
        7496608828734208995,
        3027987310927362070,
        1084116758278597434,
        8432674962636872497,
        6366949616124486741,
        3317180567605302695,
        4126367219710616192,
        857922949848606743,
        5574657817854327551,
        2304440124233517939,
        7976795001761005833,
        151704239174738462,
        1766377132456155317,
        8808180137222848022,
        1561444098036662810,
        2260483556127198990,
        3801786133852438321,
        8507350014714338622,
        52257679742996983,
        869723703728349571,
        7703499737194522303,
        1815411826820182851,
        2544648642677927683,
        1296696299745741625
      ],
      retiredRelationUids: const [2382961371279645997],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Countdown: obx_int.EntityDefinition<Countdown>(
        model: _entities[0],
        toOneRelations: (Countdown object) => [],
        toManyRelations: (Countdown object) => {},
        getId: (Countdown object) => object.id,
        setId: (Countdown object, int id) {
          object.id = id;
        },
        objectToFB: (Countdown object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.remainingSeconds);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final remainingSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object =
              Countdown(id: idParam, remainingSeconds: remainingSecondsParam);

          return object;
        }),
    WritingPrompt: obx_int.EntityDefinition<WritingPrompt>(
        model: _entities[1],
        toOneRelations: (WritingPrompt object) => [object.category],
        toManyRelations: (WritingPrompt object) => {
              obx_int.RelInfo<WritingPromptAnswer>.toOneBacklink(
                  4,
                  object.id,
                  (WritingPromptAnswer srcObject) =>
                      srcObject.writingPrompt): object.answers
            },
        getId: (WritingPrompt object) => object.id,
        setId: (WritingPrompt object, int id) {
          object.id = id;
        },
        objectToFB: (WritingPrompt object, fb.Builder fbb) {
          final promptOffset = fbb.writeString(object.prompt);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, promptOffset);
          fbb.addInt64(3, object.lastTimeAnswered?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastEdited.millisecondsSinceEpoch);
          fbb.addInt64(8, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastTimeAnsweredValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final promptParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastEditedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final lastTimeAnsweredParam = lastTimeAnsweredValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastTimeAnsweredValue);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = WritingPrompt(
              prompt: promptParam,
              lastEdited: lastEditedParam,
              lastTimeAnswered: lastTimeAnsweredParam,
              id: idParam);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.category.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<WritingPrompt>(
              object.answers,
              store,
              obx_int.RelInfo<WritingPromptAnswer>.toOneBacklink(4, object.id,
                  (WritingPromptAnswer srcObject) => srcObject.writingPrompt));
          return object;
        }),
    WritingPromptAnswer: obx_int.EntityDefinition<WritingPromptAnswer>(
        model: _entities[2],
        toOneRelations: (WritingPromptAnswer object) => [object.writingPrompt],
        toManyRelations: (WritingPromptAnswer object) => {},
        getId: (WritingPromptAnswer object) => object.id,
        setId: (WritingPromptAnswer object, int id) {
          object.id = id;
        },
        objectToFB: (WritingPromptAnswer object, fb.Builder fbb) {
          final answerOffset = fbb.writeString(object.answer);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, answerOffset);
          fbb.addInt64(2, object.dateAnswered.millisecondsSinceEpoch);
          fbb.addInt64(3, object.writingPrompt.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final answerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateAnsweredParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = WritingPromptAnswer(
              answer: answerParam, dateAnswered: dateAnsweredParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.writingPrompt.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.writingPrompt.attach(store);
          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[3],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Category(id: idParam, name: nameParam);

          return object;
        }),
    Sequence: obx_int.EntityDefinition<Sequence>(
        model: _entities[4],
        toOneRelations: (Sequence object) => [],
        toManyRelations: (Sequence object) => {
              obx_int.RelInfo<SequenceItem>.toOneBacklink(6, object.id,
                  (SequenceItem srcObject) => srcObject.sequence): object.slots
            },
        getId: (Sequence object) => object.id,
        setId: (Sequence object, int id) {
          object.id = id;
        },
        objectToFB: (Sequence object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = Sequence(
              id: idParam, name: nameParam, description: descriptionParam);
          obx_int.InternalToManyAccess.setRelInfo<Sequence>(
              object.slots,
              store,
              obx_int.RelInfo<SequenceItem>.toOneBacklink(6, object.id,
                  (SequenceItem srcObject) => srcObject.sequence));
          return object;
        }),
    FlashCard: obx_int.EntityDefinition<FlashCard>(
        model: _entities[5],
        toOneRelations: (FlashCard object) =>
            [object.subject, object.chatHistory],
        toManyRelations: (FlashCard object) => {},
        getId: (FlashCard object) => object.id,
        setId: (FlashCard object, int id) {
          object.id = id;
        },
        objectToFB: (FlashCard object, fb.Builder fbb) {
          final questionOffset = fbb.writeString(object.question);
          final answerOffset = fbb.writeString(object.answer);
          final typeOffset = fbb.writeString(object.type);
          final correctAnswerDislpayLanguageOffset =
              fbb.writeString(object.correctAnswerDislpayLanguage);
          final questionDisplayLanguageOffset =
              fbb.writeString(object.questionDisplayLanguage);
          final answerInputLanguageOffset =
              fbb.writeString(object.answerInputLanguage);
          final hintOffset = fbb.writeString(object.hint);
          final gradesOffset = fbb.writeListInt64(object.grades);
          final analysisOffset = fbb.writeString(object.analysis);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, questionOffset);
          fbb.addOffset(2, answerOffset);
          fbb.addInt64(3, object.timesCorrect);
          fbb.addInt64(4, object.timesIncorrect);
          fbb.addInt64(5, object.userRating);
          fbb.addInt64(6, object.subject.targetId);
          fbb.addOffset(7, typeOffset);
          fbb.addOffset(11, correctAnswerDislpayLanguageOffset);
          fbb.addOffset(12, questionDisplayLanguageOffset);
          fbb.addOffset(13, answerInputLanguageOffset);
          fbb.addOffset(14, hintOffset);
          fbb.addInt64(16, object.chatHistory.targetId);
          fbb.addOffset(17, gradesOffset);
          fbb.addOffset(18, analysisOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final questionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final answerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final answerInputLanguageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final hintParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 32, '');
          final object = FlashCard(
              id: idParam,
              question: questionParam,
              answer: answerParam,
              answerInputLanguage: answerInputLanguageParam,
              hint: hintParam)
            ..timesCorrect =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..timesIncorrect =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..userRating =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..type = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 18, '')
            ..correctAnswerDislpayLanguage =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 26, '')
            ..questionDisplayLanguage =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 28, '')
            ..grades = const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                .vTableGet(buffer, rootOffset, 38, [])
            ..analysis = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 40, '');
          object.subject.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.subject.attach(store);
          object.chatHistory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
          object.chatHistory.attach(store);
          return object;
        }),
    SequenceItem: obx_int.EntityDefinition<SequenceItem>(
        model: _entities[6],
        toOneRelations: (SequenceItem object) => [object.sequence],
        toManyRelations: (SequenceItem object) => {},
        getId: (SequenceItem object) => object.id,
        setId: (SequenceItem object, int id) {
          object.id = id;
        },
        objectToFB: (SequenceItem object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.index);
          fbb.addInt64(4, object.entityId);
          fbb.addInt64(5, object.sequence.targetId);
          fbb.addOffset(6, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final indexParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final entityIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final sequenceParam = obx.ToOne<Sequence>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final object = SequenceItem(
              id: idParam,
              index: indexParam,
              type: typeParam,
              entityId: entityIdParam,
              sequence: sequenceParam);
          object.sequence.attach(store);
          return object;
        }),
    Subject: obx_int.EntityDefinition<Subject>(
        model: _entities[7],
        toOneRelations: (Subject object) => [],
        toManyRelations: (Subject object) => {},
        getId: (Subject object) => object.id,
        setId: (Subject object, int id) {
          object.id = id;
        },
        objectToFB: (Subject object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final colorOffset = fbb.writeString(object.color);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, colorOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final colorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Subject(
              id: idParam,
              name: nameParam,
              description: descriptionParam,
              color: colorParam);

          return object;
        }),
    FlashCardSequence: obx_int.EntityDefinition<FlashCardSequence>(
        model: _entities[8],
        toOneRelations: (FlashCardSequence object) => [object.subject],
        toManyRelations: (FlashCardSequence object) => {},
        getId: (FlashCardSequence object) => object.id,
        setId: (FlashCardSequence object, int id) {
          object.id = id;
        },
        objectToFB: (FlashCardSequence object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.number_of_cards);
          fbb.addInt64(4, object.subject.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final subjectParam = obx.ToOne<Subject>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final number_of_cardsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object = FlashCardSequence(
              id: idParam,
              subject: subjectParam,
              number_of_cards: number_of_cardsParam);
          object.subject.attach(store);
          return object;
        }),
    Settings: obx_int.EntityDefinition<Settings>(
        model: _entities[9],
        toOneRelations: (Settings object) => [],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          final homeFolderPathOffset = fbb.writeString(object.homeFolderPath);
          final themeModeOffset = fbb.writeString(object.themeMode);
          final cssStylePathOffset = object.cssStylePath == null
              ? null
              : fbb.writeString(object.cssStylePath!);
          final codeStylePathOffset = object.codeStylePath == null
              ? null
              : fbb.writeString(object.codeStylePath!);
          fbb.startTable(25);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, homeFolderPathOffset);
          fbb.addInt64(19, object.dateModifiedMillis);
          fbb.addOffset(20, themeModeOffset);
          fbb.addFloat64(21, object.openai_tts_gain);
          fbb.addOffset(22, cssStylePathOffset);
          fbb.addOffset(23, codeStylePathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final homeFolderPathParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final dateModifiedMillisParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          final themeModeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 44, '');
          final object = Settings(
              homeFolderPath: homeFolderPathParam,
              dateModifiedMillis: dateModifiedMillisParam,
              themeMode: themeModeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..openai_tts_gain =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 46, 0)
            ..cssStylePath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 48)
            ..codeStylePath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 50);

          return object;
        }),
    SpokenMessage: obx_int.EntityDefinition<SpokenMessage>(
        model: _entities[10],
        toOneRelations: (SpokenMessage object) => [object.category],
        toManyRelations: (SpokenMessage object) => {},
        getId: (SpokenMessage object) => object.id,
        setId: (SpokenMessage object, int id) {
          object.id = id;
        },
        objectToFB: (SpokenMessage object, fb.Builder fbb) {
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final audioFilePathOffset = object.audioFilePath == null
              ? null
              : fbb.writeString(object.audioFilePath!);
          final voiceOffset = fbb.writeString(object.voice);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, audioFilePathOffset);
          fbb.addInt64(3, object.lastEdited?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastTimeUsed?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.category.targetId);
          fbb.addFloat64(6, object.speed);
          fbb.addOffset(7, voiceOffset);
          fbb.addFloat64(8, object.gain);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastEditedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final lastTimeUsedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final lastEditedParam = lastEditedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastEditedValue);
          final speedParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final voiceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final gainParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final lastTimeUsedParam = lastTimeUsedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastTimeUsedValue);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = SpokenMessage(
              text: textParam,
              lastEdited: lastEditedParam,
              speed: speedParam,
              voice: voiceParam,
              gain: gainParam,
              lastTimeUsed: lastTimeUsedParam,
              id: idParam)
            ..audioFilePath = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.category.attach(store);
          return object;
        }),
    SpokenMessageCategory: obx_int.EntityDefinition<SpokenMessageCategory>(
        model: _entities[11],
        toOneRelations: (SpokenMessageCategory object) => [],
        toManyRelations: (SpokenMessageCategory object) => {},
        getId: (SpokenMessageCategory object) => object.id,
        setId: (SpokenMessageCategory object, int id) {
          object.id = id;
        },
        objectToFB: (SpokenMessageCategory object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final message_prefixOffset = fbb.writeString(object.message_prefix);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, message_prefixOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = SpokenMessageCategory(id: idParam, name: nameParam)
            ..message_prefix = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '');

          return object;
        }),
    ChatHistory: obx_int.EntityDefinition<ChatHistory>(
        model: _entities[12],
        toOneRelations: (ChatHistory object) => [],
        toManyRelations: (ChatHistory object) => {
              obx_int.RelInfo<ChatMessage>.toOneBacklink(5, object.id,
                      (ChatMessage srcObject) => srcObject.chatHistory):
                  object.messages
            },
        getId: (ChatHistory object) => object.id,
        setId: (ChatHistory object, int id) {
          object.id = id;
        },
        objectToFB: (ChatHistory object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = ChatHistory(id: idParam);
          obx_int.InternalToManyAccess.setRelInfo<ChatHistory>(
              object.messages,
              store,
              obx_int.RelInfo<ChatMessage>.toOneBacklink(5, object.id,
                  (ChatMessage srcObject) => srcObject.chatHistory));
          return object;
        }),
    ChatMessage: obx_int.EntityDefinition<ChatMessage>(
        model: _entities[13],
        toOneRelations: (ChatMessage object) => [object.chatHistory],
        toManyRelations: (ChatMessage object) => {},
        getId: (ChatMessage object) => object.id,
        setId: (ChatMessage object, int id) {
          object.id = id;
        },
        objectToFB: (ChatMessage object, fb.Builder fbb) {
          final roleOffset = fbb.writeString(object.role);
          final contentOffset = fbb.writeString(object.content);
          final embeddingOffset = object.embedding == null
              ? null
              : fbb.writeString(object.embedding!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, roleOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addOffset(3, embeddingOffset);
          fbb.addInt64(4, object.chatHistory.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final embeddingParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = ChatMessage(
              id: idParam,
              role: roleParam,
              content: contentParam,
              embedding: embeddingParam);
          object.chatHistory.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.chatHistory.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Countdown] entity fields to define ObjectBox queries.
class Countdown_ {
  /// See [Countdown.id].
  static final id =
      obx.QueryIntegerProperty<Countdown>(_entities[0].properties[0]);

  /// See [Countdown.remainingSeconds].
  static final remainingSeconds =
      obx.QueryIntegerProperty<Countdown>(_entities[0].properties[1]);
}

/// [WritingPrompt] entity fields to define ObjectBox queries.
class WritingPrompt_ {
  /// See [WritingPrompt.id].
  static final id =
      obx.QueryIntegerProperty<WritingPrompt>(_entities[1].properties[0]);

  /// See [WritingPrompt.prompt].
  static final prompt =
      obx.QueryStringProperty<WritingPrompt>(_entities[1].properties[1]);

  /// See [WritingPrompt.lastTimeAnswered].
  static final lastTimeAnswered =
      obx.QueryDateProperty<WritingPrompt>(_entities[1].properties[2]);

  /// See [WritingPrompt.lastEdited].
  static final lastEdited =
      obx.QueryDateProperty<WritingPrompt>(_entities[1].properties[3]);

  /// See [WritingPrompt.category].
  static final category = obx.QueryRelationToOne<WritingPrompt, Category>(
      _entities[1].properties[4]);

  /// see [WritingPrompt.answers]
  static final answers =
      obx.QueryBacklinkToMany<WritingPromptAnswer, WritingPrompt>(
          WritingPromptAnswer_.writingPrompt);
}

/// [WritingPromptAnswer] entity fields to define ObjectBox queries.
class WritingPromptAnswer_ {
  /// See [WritingPromptAnswer.id].
  static final id =
      obx.QueryIntegerProperty<WritingPromptAnswer>(_entities[2].properties[0]);

  /// See [WritingPromptAnswer.answer].
  static final answer =
      obx.QueryStringProperty<WritingPromptAnswer>(_entities[2].properties[1]);

  /// See [WritingPromptAnswer.dateAnswered].
  static final dateAnswered =
      obx.QueryDateProperty<WritingPromptAnswer>(_entities[2].properties[2]);

  /// See [WritingPromptAnswer.writingPrompt].
  static final writingPrompt =
      obx.QueryRelationToOne<WritingPromptAnswer, WritingPrompt>(
          _entities[2].properties[3]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[3].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[3].properties[1]);
}

/// [Sequence] entity fields to define ObjectBox queries.
class Sequence_ {
  /// See [Sequence.id].
  static final id =
      obx.QueryIntegerProperty<Sequence>(_entities[4].properties[0]);

  /// See [Sequence.name].
  static final name =
      obx.QueryStringProperty<Sequence>(_entities[4].properties[1]);

  /// See [Sequence.description].
  static final description =
      obx.QueryStringProperty<Sequence>(_entities[4].properties[2]);

  /// see [Sequence.slots]
  static final slots =
      obx.QueryBacklinkToMany<SequenceItem, Sequence>(SequenceItem_.sequence);
}

/// [FlashCard] entity fields to define ObjectBox queries.
class FlashCard_ {
  /// See [FlashCard.id].
  static final id =
      obx.QueryIntegerProperty<FlashCard>(_entities[5].properties[0]);

  /// See [FlashCard.question].
  static final question =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[1]);

  /// See [FlashCard.answer].
  static final answer =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[2]);

  /// See [FlashCard.timesCorrect].
  static final timesCorrect =
      obx.QueryIntegerProperty<FlashCard>(_entities[5].properties[3]);

  /// See [FlashCard.timesIncorrect].
  static final timesIncorrect =
      obx.QueryIntegerProperty<FlashCard>(_entities[5].properties[4]);

  /// See [FlashCard.userRating].
  static final userRating =
      obx.QueryIntegerProperty<FlashCard>(_entities[5].properties[5]);

  /// See [FlashCard.subject].
  static final subject =
      obx.QueryRelationToOne<FlashCard, Subject>(_entities[5].properties[6]);

  /// See [FlashCard.type].
  static final type =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[7]);

  /// See [FlashCard.correctAnswerDislpayLanguage].
  static final correctAnswerDislpayLanguage =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[8]);

  /// See [FlashCard.questionDisplayLanguage].
  static final questionDisplayLanguage =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[9]);

  /// See [FlashCard.answerInputLanguage].
  static final answerInputLanguage =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[10]);

  /// See [FlashCard.hint].
  static final hint =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[11]);

  /// See [FlashCard.chatHistory].
  static final chatHistory = obx.QueryRelationToOne<FlashCard, ChatHistory>(
      _entities[5].properties[12]);

  /// See [FlashCard.grades].
  static final grades =
      obx.QueryIntegerVectorProperty<FlashCard>(_entities[5].properties[13]);

  /// See [FlashCard.analysis].
  static final analysis =
      obx.QueryStringProperty<FlashCard>(_entities[5].properties[14]);
}

/// [SequenceItem] entity fields to define ObjectBox queries.
class SequenceItem_ {
  /// See [SequenceItem.id].
  static final id =
      obx.QueryIntegerProperty<SequenceItem>(_entities[6].properties[0]);

  /// See [SequenceItem.index].
  static final index =
      obx.QueryIntegerProperty<SequenceItem>(_entities[6].properties[1]);

  /// See [SequenceItem.entityId].
  static final entityId =
      obx.QueryIntegerProperty<SequenceItem>(_entities[6].properties[2]);

  /// See [SequenceItem.sequence].
  static final sequence = obx.QueryRelationToOne<SequenceItem, Sequence>(
      _entities[6].properties[3]);

  /// See [SequenceItem.type].
  static final type =
      obx.QueryStringProperty<SequenceItem>(_entities[6].properties[4]);
}

/// [Subject] entity fields to define ObjectBox queries.
class Subject_ {
  /// See [Subject.id].
  static final id =
      obx.QueryIntegerProperty<Subject>(_entities[7].properties[0]);

  /// See [Subject.name].
  static final name =
      obx.QueryStringProperty<Subject>(_entities[7].properties[1]);

  /// See [Subject.description].
  static final description =
      obx.QueryStringProperty<Subject>(_entities[7].properties[2]);

  /// See [Subject.color].
  static final color =
      obx.QueryStringProperty<Subject>(_entities[7].properties[3]);
}

/// [FlashCardSequence] entity fields to define ObjectBox queries.
class FlashCardSequence_ {
  /// See [FlashCardSequence.id].
  static final id =
      obx.QueryIntegerProperty<FlashCardSequence>(_entities[8].properties[0]);

  /// See [FlashCardSequence.number_of_cards].
  static final number_of_cards =
      obx.QueryIntegerProperty<FlashCardSequence>(_entities[8].properties[1]);

  /// See [FlashCardSequence.subject].
  static final subject = obx.QueryRelationToOne<FlashCardSequence, Subject>(
      _entities[8].properties[2]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// See [Settings.id].
  static final id =
      obx.QueryIntegerProperty<Settings>(_entities[9].properties[0]);

  /// See [Settings.homeFolderPath].
  static final homeFolderPath =
      obx.QueryStringProperty<Settings>(_entities[9].properties[1]);

  /// See [Settings.dateModifiedMillis].
  static final dateModifiedMillis =
      obx.QueryIntegerProperty<Settings>(_entities[9].properties[2]);

  /// See [Settings.themeMode].
  static final themeMode =
      obx.QueryStringProperty<Settings>(_entities[9].properties[3]);

  /// See [Settings.openai_tts_gain].
  static final openai_tts_gain =
      obx.QueryDoubleProperty<Settings>(_entities[9].properties[4]);

  /// See [Settings.cssStylePath].
  static final cssStylePath =
      obx.QueryStringProperty<Settings>(_entities[9].properties[5]);

  /// See [Settings.codeStylePath].
  static final codeStylePath =
      obx.QueryStringProperty<Settings>(_entities[9].properties[6]);
}

/// [SpokenMessage] entity fields to define ObjectBox queries.
class SpokenMessage_ {
  /// See [SpokenMessage.id].
  static final id =
      obx.QueryIntegerProperty<SpokenMessage>(_entities[10].properties[0]);

  /// See [SpokenMessage.text].
  static final text =
      obx.QueryStringProperty<SpokenMessage>(_entities[10].properties[1]);

  /// See [SpokenMessage.audioFilePath].
  static final audioFilePath =
      obx.QueryStringProperty<SpokenMessage>(_entities[10].properties[2]);

  /// See [SpokenMessage.lastEdited].
  static final lastEdited =
      obx.QueryDateProperty<SpokenMessage>(_entities[10].properties[3]);

  /// See [SpokenMessage.lastTimeUsed].
  static final lastTimeUsed =
      obx.QueryDateProperty<SpokenMessage>(_entities[10].properties[4]);

  /// See [SpokenMessage.category].
  static final category =
      obx.QueryRelationToOne<SpokenMessage, SpokenMessageCategory>(
          _entities[10].properties[5]);

  /// See [SpokenMessage.speed].
  static final speed =
      obx.QueryDoubleProperty<SpokenMessage>(_entities[10].properties[6]);

  /// See [SpokenMessage.voice].
  static final voice =
      obx.QueryStringProperty<SpokenMessage>(_entities[10].properties[7]);

  /// See [SpokenMessage.gain].
  static final gain =
      obx.QueryDoubleProperty<SpokenMessage>(_entities[10].properties[8]);
}

/// [SpokenMessageCategory] entity fields to define ObjectBox queries.
class SpokenMessageCategory_ {
  /// See [SpokenMessageCategory.id].
  static final id = obx.QueryIntegerProperty<SpokenMessageCategory>(
      _entities[11].properties[0]);

  /// See [SpokenMessageCategory.name].
  static final name = obx.QueryStringProperty<SpokenMessageCategory>(
      _entities[11].properties[1]);

  /// See [SpokenMessageCategory.message_prefix].
  static final message_prefix = obx.QueryStringProperty<SpokenMessageCategory>(
      _entities[11].properties[2]);
}

/// [ChatHistory] entity fields to define ObjectBox queries.
class ChatHistory_ {
  /// See [ChatHistory.id].
  static final id =
      obx.QueryIntegerProperty<ChatHistory>(_entities[12].properties[0]);

  /// see [ChatHistory.messages]
  static final messages = obx.QueryBacklinkToMany<ChatMessage, ChatHistory>(
      ChatMessage_.chatHistory);
}

/// [ChatMessage] entity fields to define ObjectBox queries.
class ChatMessage_ {
  /// See [ChatMessage.id].
  static final id =
      obx.QueryIntegerProperty<ChatMessage>(_entities[13].properties[0]);

  /// See [ChatMessage.role].
  static final role =
      obx.QueryStringProperty<ChatMessage>(_entities[13].properties[1]);

  /// See [ChatMessage.content].
  static final content =
      obx.QueryStringProperty<ChatMessage>(_entities[13].properties[2]);

  /// See [ChatMessage.embedding].
  static final embedding =
      obx.QueryStringProperty<ChatMessage>(_entities[13].properties[3]);

  /// See [ChatMessage.chatHistory].
  static final chatHistory = obx.QueryRelationToOne<ChatMessage, ChatHistory>(
      _entities[13].properties[4]);
}

// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/data_types/object_box_types/category.dart';
import 'src/data_types/object_box_types/countdown.dart';
import 'src/data_types/object_box_types/writing_prompt.dart';
import 'src/data_types/object_box_types/writing_prompt_answer.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 146195575595869195),
      name: 'Countdown',
      lastPropertyId: const obx_int.IdUid(2, 4543042334429189001),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5203136631529040311),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4543042334429189001),
            name: 'remainingSeconds',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4562760401703630193),
      name: 'WritingPrompt',
      lastPropertyId: const obx_int.IdUid(8, 6675773488354720603),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7069261292951093926),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7821508857526449903),
            name: 'prompt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4192646412743095980),
            name: 'lastTimeAnswered',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3903436709462758320),
            name: 'lastEdited',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6675773488354720603),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 2601898366546795901),
            relationTarget: 'Category')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'answers',
            srcEntity: 'WritingPromptAnswer',
            srcField: 'writingPrompt')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8016132364118866485),
      name: 'WritingPromptAnswer',
      lastPropertyId: const obx_int.IdUid(4, 3456486402785270961),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3949528071363160509),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6631672326208742983),
            name: 'answer',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1855726055833227939),
            name: 'dateAnswered',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3456486402785270961),
            name: 'writingPromptId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 868981703487449150),
            relationTarget: 'WritingPrompt')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8031683048514304163),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(2, 5294113057338185632),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5502069285358560879),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5294113057338185632),
            name: 'name',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 8807564465112648040))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 8031683048514304163),
      lastIndexId: const obx_int.IdUid(3, 2601898366546795901),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        4490942566436496262,
        1643685379610388084,
        1576598753525470887
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Countdown: obx_int.EntityDefinition<Countdown>(
        model: _entities[0],
        toOneRelations: (Countdown object) => [],
        toManyRelations: (Countdown object) => {},
        getId: (Countdown object) => object.id,
        setId: (Countdown object, int id) {
          object.id = id;
        },
        objectToFB: (Countdown object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.remainingSeconds);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final remainingSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final object =
              Countdown(id: idParam, remainingSeconds: remainingSecondsParam);

          return object;
        }),
    WritingPrompt: obx_int.EntityDefinition<WritingPrompt>(
        model: _entities[1],
        toOneRelations: (WritingPrompt object) => [object.category],
        toManyRelations: (WritingPrompt object) => {
              obx_int.RelInfo<WritingPromptAnswer>.toOneBacklink(
                  4,
                  object.id,
                  (WritingPromptAnswer srcObject) =>
                      srcObject.writingPrompt): object.answers
            },
        getId: (WritingPrompt object) => object.id,
        setId: (WritingPrompt object, int id) {
          object.id = id;
        },
        objectToFB: (WritingPrompt object, fb.Builder fbb) {
          final promptOffset = fbb.writeString(object.prompt);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, promptOffset);
          fbb.addInt64(3, object.lastTimeAnswered?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.lastEdited.millisecondsSinceEpoch);
          fbb.addInt64(7, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastTimeAnsweredValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final promptParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastEditedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final lastTimeAnsweredParam = lastTimeAnsweredValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastTimeAnsweredValue);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = WritingPrompt(
              prompt: promptParam,
              lastEdited: lastEditedParam,
              lastTimeAnswered: lastTimeAnsweredParam,
              id: idParam);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.category.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<WritingPrompt>(
              object.answers,
              store,
              obx_int.RelInfo<WritingPromptAnswer>.toOneBacklink(4, object.id,
                  (WritingPromptAnswer srcObject) => srcObject.writingPrompt));
          return object;
        }),
    WritingPromptAnswer: obx_int.EntityDefinition<WritingPromptAnswer>(
        model: _entities[2],
        toOneRelations: (WritingPromptAnswer object) => [object.writingPrompt],
        toManyRelations: (WritingPromptAnswer object) => {},
        getId: (WritingPromptAnswer object) => object.id,
        setId: (WritingPromptAnswer object, int id) {
          object.id = id;
        },
        objectToFB: (WritingPromptAnswer object, fb.Builder fbb) {
          final answerOffset = fbb.writeString(object.answer);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, answerOffset);
          fbb.addInt64(2, object.dateAnswered.millisecondsSinceEpoch);
          fbb.addInt64(3, object.writingPrompt.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final answerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateAnsweredParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = WritingPromptAnswer(
              answer: answerParam, dateAnswered: dateAnsweredParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.writingPrompt.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.writingPrompt.attach(store);
          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[3],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = Category(id: idParam, name: nameParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Countdown] entity fields to define ObjectBox queries.
class Countdown_ {
  /// See [Countdown.id].
  static final id =
      obx.QueryIntegerProperty<Countdown>(_entities[0].properties[0]);

  /// See [Countdown.remainingSeconds].
  static final remainingSeconds =
      obx.QueryIntegerProperty<Countdown>(_entities[0].properties[1]);
}

/// [WritingPrompt] entity fields to define ObjectBox queries.
class WritingPrompt_ {
  /// See [WritingPrompt.id].
  static final id =
      obx.QueryIntegerProperty<WritingPrompt>(_entities[1].properties[0]);

  /// See [WritingPrompt.prompt].
  static final prompt =
      obx.QueryStringProperty<WritingPrompt>(_entities[1].properties[1]);

  /// See [WritingPrompt.lastTimeAnswered].
  static final lastTimeAnswered =
      obx.QueryDateProperty<WritingPrompt>(_entities[1].properties[2]);

  /// See [WritingPrompt.lastEdited].
  static final lastEdited =
      obx.QueryDateProperty<WritingPrompt>(_entities[1].properties[3]);

  /// See [WritingPrompt.category].
  static final category = obx.QueryRelationToOne<WritingPrompt, Category>(
      _entities[1].properties[4]);

  /// see [WritingPrompt.answers]
  static final answers =
      obx.QueryBacklinkToMany<WritingPromptAnswer, WritingPrompt>(
          WritingPromptAnswer_.writingPrompt);
}

/// [WritingPromptAnswer] entity fields to define ObjectBox queries.
class WritingPromptAnswer_ {
  /// See [WritingPromptAnswer.id].
  static final id =
      obx.QueryIntegerProperty<WritingPromptAnswer>(_entities[2].properties[0]);

  /// See [WritingPromptAnswer.answer].
  static final answer =
      obx.QueryStringProperty<WritingPromptAnswer>(_entities[2].properties[1]);

  /// See [WritingPromptAnswer.dateAnswered].
  static final dateAnswered =
      obx.QueryDateProperty<WritingPromptAnswer>(_entities[2].properties[2]);

  /// See [WritingPromptAnswer.writingPrompt].
  static final writingPrompt =
      obx.QueryRelationToOne<WritingPromptAnswer, WritingPrompt>(
          _entities[2].properties[3]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[3].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[3].properties[1]);
}
